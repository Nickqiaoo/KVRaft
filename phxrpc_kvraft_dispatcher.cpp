/* phxrpc_kvraft_dispatcher.h

 Generated by phxrpc_pb2service from kvraft.proto

 Please DO NOT edit unless you know exactly what you are doing.

*/

#include "phxrpc_kvraft_dispatcher.h"

#include <errno.h>

#include "phxrpc/http.h"
#include "phxrpc/file.h"

#include "kvraft.pb.h"
#include "phxrpc_kvraft_service.h"


KVRaftDispatcher::KVRaftDispatcher(KVRaftService &service, phxrpc::DispatcherArgs_t *dispatcher_args)
        : service_(service), dispatcher_args_(dispatcher_args) {
}

KVRaftDispatcher::~KVRaftDispatcher() {
}

const phxrpc::BaseDispatcher<KVRaftDispatcher>::URIFuncMap &KVRaftDispatcher::GetURIFuncMap() {
    static phxrpc::BaseDispatcher<KVRaftDispatcher>::URIFuncMap uri_func_map = {
        {"/kvraft/PHXEcho", &KVRaftDispatcher::PHXEcho},
        {"/kvraft/RequestVote", &KVRaftDispatcher::RequestVote},
        {"/kvraft/AppendEntries", &KVRaftDispatcher::AppendEntries},
        {"/kvraft/Command", &KVRaftDispatcher::Command}};
    return uri_func_map;
}

int KVRaftDispatcher::PHXEcho(const phxrpc::BaseRequest &req, phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(-1, "PHXEcho", 1);

    int ret{-1};

    google::protobuf::StringValue req_pb;
    google::protobuf::StringValue resp_pb;

    // unpack request
    {
        ret = req.ToPb(&req_pb);
        if (0 != ret) {
            phxrpc::log(LOG_ERR, "ToPb err %d", ret);

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.PHXEcho(req_pb, &resp_pb);
        }
    }

    // pack response
    {
        if (0 != resp->FromPb(resp_pb)) {
            phxrpc::log(LOG_ERR, "FromPb err %d", ret);

            return -ENOMEM;
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: PHXEcho = %d", ret);

    return ret;
}

int KVRaftDispatcher::RequestVote(const phxrpc::BaseRequest &req, phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(-1, "RequestVote", 1);

    int ret{-1};

    kvraft::RequestVoteArgs req_pb;
    kvraft::RequestVoteReply resp_pb;

    // unpack request
    {
        ret = req.ToPb(&req_pb);
        if (0 != ret) {
            phxrpc::log(LOG_ERR, "ToPb err %d", ret);

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.RequestVote(req_pb, &resp_pb);
        }
    }

    // pack response
    {
        if (0 != resp->FromPb(resp_pb)) {
            phxrpc::log(LOG_ERR, "FromPb err %d", ret);

            return -ENOMEM;
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: RequestVote = %d", ret);

    return ret;
}

int KVRaftDispatcher::AppendEntries(const phxrpc::BaseRequest &req, phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(-1, "AppendEntries", 1);

    int ret{-1};

    kvraft::AppendEntriesArgs req_pb;
    kvraft::AppendEntriesReply resp_pb;

    // unpack request
    {
        ret = req.ToPb(&req_pb);
        if (0 != ret) {
            phxrpc::log(LOG_ERR, "ToPb err %d", ret);

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.AppendEntries(req_pb, &resp_pb);
        }
    }

    // pack response
    {
        if (0 != resp->FromPb(resp_pb)) {
            phxrpc::log(LOG_ERR, "FromPb err %d", ret);

            return -ENOMEM;
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: AppendEntries = %d", ret);

    return ret;
}

int KVRaftDispatcher::Command(const phxrpc::BaseRequest &req, phxrpc::BaseResponse *const resp) {
    dispatcher_args_->server_monitor->SvrCall(-1, "Command", 1);

    int ret{-1};

    kvraft::KVArgs req_pb;
    kvraft::KVReply resp_pb;

    // unpack request
    {
        ret = req.ToPb(&req_pb);
        if (0 != ret) {
            phxrpc::log(LOG_ERR, "ToPb err %d", ret);

            return -EINVAL;
        }
    }

    // logic process
    {
        if (0 == ret) {
            ret = service_.Command(req_pb, &resp_pb);
        }
    }

    // pack response
    {
        if (0 != resp->FromPb(resp_pb)) {
            phxrpc::log(LOG_ERR, "FromPb err %d", ret);

            return -ENOMEM;
        }
    }

    phxrpc::log(LOG_DEBUG, "RETN: Command = %d", ret);

    return ret;
}

