/* kvraft_main.cpp

 Generated by phxrpc_pb2server from kvraft.proto

*/

#include <signal.h>
#include <unistd.h>
#include <iostream>

#include "phxrpc/comm.h"
#include "phxrpc/file.h"
#include "phxrpc/http.h"
#include "phxrpc/msg.h"
#include "phxrpc/rpc.h"

#include "kvraft_server_config.h"
#include "kvraft_service_impl.h"
#include "kvserver.h"
#include "phxrpc_kvraft_dispatcher.h"

using namespace std;

void Dispatch(const phxrpc::BaseRequest &req, phxrpc::BaseResponse *const resp,
              phxrpc::DispatcherArgs_t *const args) {
    ServiceArgs_t *service_args{(ServiceArgs_t *)(args->service_args)};

    KVRaftServiceImpl service(*service_args, args->server_worker_uthread_scheduler);
    KVRaftDispatcher dispatcher(service, args);

    phxrpc::BaseDispatcher<KVRaftDispatcher> base_dispatcher(dispatcher,
                                                             KVRaftDispatcher::GetURIFuncMap());
    if (!base_dispatcher.Dispatch(req, resp)) {
        resp->SetFake(phxrpc::BaseResponse::FakeReason::DISPATCH_ERROR);
    }
}

void ShowUsage(const char *program) {
    printf("\n");
    printf("Usage: %s [-c <config>] [-d] [-l <log level>] [-v]\n", program);
    printf("\n");

    exit(0);
}

int main(int argc, char **argv) {
    const char *config_file{nullptr};
    bool daemonize{false};
    int log_level{-1};
    extern char *optarg;
    int c, id, num_of_server;
    while (EOF != (c = getopt(argc, argv, "c:vl:di:s:"))) {
        switch (c) {
            case 'c':
                config_file = optarg;
                break;
            case 'd':
                daemonize = true;
                break;
            case 'l':
                log_level = atoi(optarg);
                break;
            case 'i':
                id = atoi(optarg);
                break;
            case 's':
                num_of_server = atoi(optarg);
                break;
            case 'v':
            default:
                ShowUsage(argv[0]);
                break;
        }
    }

    if (daemonize) phxrpc::ServerUtils::Daemonize();

    PHXRPC_ASSERT(signal(SIGPIPE, SIG_IGN) != SIG_ERR);

    // set customize log / monitor
    // phxrpc::setlog(openlog, closelog, vlog);
    // phxrpc::MonitorFactory::SetFactory(new YourMonitorFactory());

    if (nullptr == config_file) ShowUsage(argv[0]);

    KVRaftServerConfig config;
    if (!config.Read(config_file)) ShowUsage(argv[0]);

    if (log_level > 0) config.GetHshaServerConfig().SetLogLevel(log_level);

    phxrpc::openlog(argv[0], config.GetHshaServerConfig().GetLogDir(),
                    config.GetHshaServerConfig().GetLogLevel());

    ServiceArgs_t service_args;
    service_args.config = &config;
    KVRaftClientUThread::Init("kvraft_client.conf");
    
    phxrpc::HshaServer server(config.GetHshaServerConfig(), Dispatch, &service_args);
    raftkv::KvServer kv_server(id, num_of_server);
    service_args.server = &kv_server;
    server.RunForever();
    phxrpc::closelog();

    return 0;
}
